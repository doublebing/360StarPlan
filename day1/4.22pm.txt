HTTP与性能优化   
屈光宇 https://imququ.com

PartI：HTTP技术简介

HTTP在浏览器网络中的位置
XHR  SSE  WebSocket
HTTP
会话层（TLS）
传输层（TCP）
网络层

TCP三次握手->数据传输->TCP四次挥手

动手写一个TCP Server/Client
引入net包 require('net')

HTTP是什么？
HTTP是应用层协议
联网细节交给了通用的、可靠的因特网传输协议TCP/IP

浏览器访问TCP Server

HTTP请求/响应报文格式
<method> <request-URL><version>
<headers>
<entity-body>

<version><status><repon-phrase>
<headers>
<entity-body>

将TCP Server改成HTTP Server

sock.write(‘<a href=”http://so.com”>hello word</a>’);
sock.write(‘Content-Type:text/html;Charset:utf-8\r\n’);

乱码检查：
检查编码是不是utf-8
html文件本身存储的编码
浏览器解析的编码
html文件里的meta标签

什么是URL
<scheme>://<user>:<password>@<host>:<port>/
<path>;<params>?<query>#<frag>

http://<host>:<port>/<path>?<query>#<frag>
ftp://<user>:<password>@<host>:<port>/
<path>;<params>

受限字符：%/.#?;:$+@&= 以及非US-ASCⅡ字符集字符

什么是HTTP状态码
200 OK *
301 Moved Permanently
302 Found
304 Not Modified *
401 Unauthorized
403 Forbidden
404 Not Found *
500 Internal Server Error
501 Not Implemented
502 Bad Gateway *

100 协议信息保留的状态码
200 正常
300 跳转 
400 客户端错误
500 服务器错误  

Header分类
通用
Date: Tue, 3 Oct 1974 02:16:00 GMT
Connection: close
请求
User-Agent: Mozilla/5.0 (Linux; U; Android 4.0.2; en-us;
Galaxy Nexus Build/ICL53F) AppleWebKit/534.30
(KHTML, like Gecko) Version/4.0 Mobile Safari/534.30
Accept: */*
Accept-Encoding:gzip, deflate, sdch

响应
Server: Nginx
Last-Modified: Thu, 16 Oct 2014 10:15:16 GMT
实体
Content-Type: text/html; charset=utf-8
Content-Length: 100
扩展（自定义）  一般X开头
X-Powered-By: thinkjs-1.0.4
X-Varnish-Hits:5

总结一下HTTP请求-响应过程
1、浏览器从URL中解析出服务器的主机名
2、浏览器将主机名转换成服务器的IP地址
3、浏览器从URL中解析出端口号，默认80
4、浏览器建立一条与服务器的TCP连接
5、浏览器向服务器发送一条HTTP请求报文
6、服务器向浏览器返回一条HTTP响应报文
7、关闭连接，浏览器显示文档

sock.write(‘Content-Length:10\r\n’);   若实际数据是10，指定长度是12  浏览器就会一直等待
sock.write(‘\r\n’);
sock.write(‘01234567890’);   
写一个浏览器吧
Transfer-Encoding:chunked  分块传输

1f49            16进制  这一次传输的块的大小
<!DOCTYPE html>
<html>
……………..

服务器在计算之后传输的块的时候，浏览器就可以根据获取的html文档开始请求其他的资源了 比如stylesheet

浏览器可以告诉服务器自己可以接受压缩的资源
Accept-Encoding:gzip

服务器端响应头：
Content-Encoding:gzip

GET/POST
GET：查询  多次刷新是无害的
POST：提交数据  不在URL中显示，在正文中显示 并不代表POST数据是安全的，抓包还是可以拿到

Cookie
document.cookie

请求头：Cookie
响应头：Set-cookie
再次访问带cookie导致数据量变大

Session
通过cookie存了用户标记 分析偏好
Size  Content

HTTP抓包工具
Wireshark
Fiddler
Firebug
Chrome
IE8+ 自带的

HTTP发包工具
telnet/curl
Fiddler *
Tamper for Firefox
Postman for Chrome
Paw for OSX

HTTP性能优化
Web应用，而不是web页面，多媒体和多设备支持，SPA（单页应用）
大部分时间消耗在网络上
HTTP请求-响应模型
一个TCP连接同时只有一个请求/响应
一个域名好几十或好几百的资源

Keep-alive
第一次请求两次往返
之后就一次往返
减少慢启动时间

同域并发限制
原来只允许2个连接
现代浏览器一般允许同域6个连接并发

域名散列：   
缺点：协议开销
模块拆分导致更多请求

合并请求:
异步接口合并
图片合并，雪碧图（CSS Sprite）
CSS,JS合并
CSS,JS内联
图片、音频内联

压缩
代码压缩（HTML,CSS,JS）
图片压缩（无损、有损）
服务端开启Gzip（文本类资源）
具体业务的压缩（去掉冗余代码，精简异步接口）

缓存  能够提高第二次的性能 强制缓存、协商缓存    
1、HTTP Cache:Last-Modified  If-Modified-Since  304 Not Modified
2、HTTP Cache:If-None-Match  Etag  If-None-Match  304 Not Modified
3、HTTP Cache:Expires 绝对时间  所有关于时间的字段不准
4、Cache-Control  相对时间  秒数  比如，Cache-Control:max-age=<s> 缓存无法返回缓存时间长于<s>秒的文档。

浏览器请求的三种方式
在地址栏回车 点击链接      使用全部缓存  200 from cache
F5/cmd+r    忽略Expires和Cache-Control，发起协商缓存  304
Ctrl+F5/cmd+shift+r  忽略全部缓存  200

样式内联   
页面加载时间点window.performance.timing   白屏时间 可用时间

用户心理
让用户更快看到主体内容：异步加载/按需加载;BigPipe;
让用户知道当前状态：加载提示；进度条
让用户感觉更快：占位图/预读/行为预判；

HTTP性能指标
HTML5 Performance API：DNS / TCP / TTFB；
服务端日志：request_time / upstream_response_time；
业务打点：头部资源加载时间；首屏时间/可用时间；

HTTP瀑布图
HTTP性能测量工具
浏览器扩展：
YSlow;
PageSpeed;
在线资源：
http://www.webpagetest.org/
https://developers.google.com/speed/pagespeed/insights/
https://gtmetrix.com/
http://pagevalid.qiwoo.org/

推荐书籍
《图解HTTP》
《HTTP权威指南》
《Web性能权威指南》
